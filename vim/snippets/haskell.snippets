snippet lang
	{-# LANGUAGE ${1:OverloadedStrings} #-}
snippet pragma
	{-# ${1:LANGUAGE} ${2:OverloadedStrings} #-}
snippet opts
	{-# OPTIONS_GHC ${1:-F -pgmF htfpp} #-}
snippet imp
	import ${1:Data.Text}
snippet impl
	import ${1:Data.Text} (${2:head})
snippet impq
	import qualified ${1:Data.Text}
snippet type
	type ${1:Type} = ${2:Type}
snippet q
	qualified
snippet data
	data ${1:Type}
	    = $1
	    { ${2:field} :: ${3:typ}
	    , ${4:field} :: ${5:typ}
snippet newtype
	newtype ${1:Type} = ${2:$1} { un${3:$1} :: ${3:Int} }
snippet inst
	instance (${1:Show a}) => ${2:Show} (${3:X}) where
	    ${4}
snippet const
	${1:name} :: ${2:a}
	$1 = ${3:undefined}
snippet fn
	${1:fn} :: ${2:a} -> ${3:a}
	$1 ${4:x} = ${5:undefined}
snippet fn2
	${1:fn} :: ${2:a} -> ${3:a} -> ${4:a}
	$1 ${5:x} ${6:y} = ${7:undefined}
snippet lambda
	\${1:x} -> ${2}
snippet l
	<-
snippet r
	->
snippet t
	(${1:a}, ${2:b})
snippet case
	case ${1:something} of
	   ${2} -> ${3}
snippet case2
	case ${1:something} of
	   ${2} -> ${3}
	   ${4} -> ${5}
